<!DOCTYPE html>
<html lang="en">
<%- include('head.ejs',{page_name:'Trang quản lý'}) %>
<body>
  <%- include('hotStyles.ejs') %>
  <!-- Loader -->
  <div id="loading">
    <img id="loading-image" src="/img/Gordon.gif" alt="Loading..." />
  </div>
  <!-- HEADER BEGIN -->
  <%- include('menus/headerMenu.ejs',{user}) %>
  <!-- HEADER END -->
  <div class="d-flex align-items-stretch">
    <nav id="sidebar">
      <%- include('menus/menu.ejs',{device:'pc'}) %>
    </nav>
    <div class="page-content" style="padding-bottom:70px;">
      <div class="page-header">
        <div class="container-fluid">
          <h2 class="h5 no-margin-bottom">Nhập lệnh</h2>
        </div>
      </div>

      <section>
        <div class="container-fluid">
          <div class="row">
            <div class="col-xl-6 col-12">
              <div class="block">
                  <form onchange="sellCheck(this);" action="" method="post">
                    <div class="container-fluid">
                      <div class="row">
                        <div class="col-12 form-group">
                          <label>NAV quỹ</label>
                          <input type="text" id="fund_nav_input" class="form-control  number-separator" name="fund_nav" placeholder="" value="" readonly/>
                        </div>
                        <div class="col-6 form-group">
                          <label>Tiền mặt còn lại</label>
                          <input type="text" id="fund_cash_input" class="form-control  number-separator" name="fund_cash" placeholder="" value="" readonly/>
                        </div>
                        <div class="col-6 form-group">
                          <label>Giá trị lệnh đặt</label>
                          <input type="text" id="order_value_input" class="form-control  number-separator" name="order_value" placeholder="" value="" readonly/>
                        </div>

                        <div class="col-12 form-group">
                          <label>Loại lệnh</label>

                          <div class="row">
                            <div class="col-6">
                              <select id="order" class="form-control" name="order_direction">
                                <option value="buy">Mua</option>
                                <option value="sell">Bán</option>
                              </select>
                            </div>
                            <div class="col-6">
                              <select id="ordertype" class="form-control" name="order_type">
                                <option value="lo">Lệnh thường</option>
                                <option value="ato">ATO</option>
                                <option value="atc">ATC</option>
                              </select>
                            </div>
                          </div>
                        </div>
                        <div class="col-12 form-group">
                          <label>Mã</label>
                          <input id="symbol" type="text" class="form-control" name="ticker" placeholder=""/>
                        </div>
                        <div class="col-12 form-group">
                          <label>Khối lượng</label>
                          <input id="vol_input" type="text" class="form-control  number-separator" name="vol" placeholder=""/>
                        </div>
                        <div class="col-12" id="vol-warning" style="display:none">
                          <label class="text-danger font-weight-bold" id="vol-warning-content"></label>
                        </div>
                        <div id="sell_pct" class="col-12 form-group" style="display:none">
                          <label>Tỷ trọng (%)</label>
                          <input id="pct_input" type="text" class="form-control" name="pct" placeholder=""/>
                        </div>
                        <div class="col-12 form-group">
                          <label>Giá</label>
                          <input id="price_input" type="text" class="form-control" name="price" placeholder=""/>
                        </div>
                        <div class="col-12" id="order_errors"></div>
                        <div class="col-12 form-group">
                          <div class="btn btn-primary" id="send" onclick="orderSend()">Gửi lệnh</div>
                          <!--input type="submit" class="btn btn-primary" name="orderSend" value="Gửi lệnh" id="send" onsubmit="orderSend()"/-->
                        </div>
                      </div>
                    </div>
                  </form>
              </div>
            </div>

            <div class="col-xl-6 col-12">
              <div class="block" style="height: -webkit-calc(100% - 30px); height:calc(100% - 30px);">
                <div class="title">
                  Danh mục đang nắm giữ
                </div>
                <div class="block-content">
                  <div style="position:relative;margin-top:30px;">
                    <div id="chartContainer" style="height: 370px; width: 100%;">

                    </div>
                    <div id="canvasTrialHide"></div>
                  </div>

                </div>
              </div>
            </div>
          </div>

          <div class="row" id="currentPfRow" style="display:none">
            <div class="col-12">
              <div class="block">
                <div class="title">
                  Chi tiết danh mục
                </div>
                <div class="block-content" id="currentPf">

                </div>
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-12">
              <div class="block">
                <div class="title">
                  Lịch sử lệnh
                </div>
                <div class="block-content" id="records">

                </div>
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-12">
              <div class="block">
                <div class="title">
                  Lịch sử cổ tức
                </div>
                <div class="block-content" id="dividend">

                </div>
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-12">
              <div class="block" style="height: -webkit-calc(100% - 30px); height:calc(100% - 30px);">
                <div class="title">
                  Biến động NAV
                </div>
                <div class="block-content">
                  <div style="position:relative;margin-top:30px;">
                    <div id="chartContainer1" style="height: 370px; width: 100%;">

                    </div>
                    <div id="canvasTrialHide"></div>
                  </div>

                </div>
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-12">
              <div class="block" style="height: -webkit-calc(100% - 30px); height:calc(100% - 30px);">
                <div class="title">
                  Hiệu quả đầu tư
                </div>
                <div class="block-content">
                  <div style="position:relative;margin-top:30px;">
                    <div id="chartContainer2" style="height: 370px; width: 100%;">

                    </div>
                    <div id="canvasTrialHide"></div>
                  </div>

                </div>
              </div>
            </div>
          </div>

        </div>
      </section>

    </div>
  </div>
</body>
<%- include ('tail.ejs') %>
<script src="/js/favico.min.js"></script>
<script src="/js/custom-script.js"></script>
<script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>

<script type="text/javascript">
    var orderType = document.getElementById("order");

    function sellCheck() {
      /*if (orderType.value == "sell") {
        //alert("check");
            document.getElementById("sell_pct").style.display = "block";
        } else {
            document.getElementById("sell_pct").style.display = "none";
      }*/
      document.getElementById('order_value_input').value = (document.getElementById('price_input').value*document.getElementById('vol_input').value.replace(/,/g, '')*1000).toLocaleString('en');
      if(document.getElementById('vol_input').value!=''){
        let vol_input = parseInt(document.getElementById('vol_input').value.replace(/,/g, ''));
        let fNav_input = parseInt(document.getElementById('fund_nav_input').value.replace(/,/g, ''));
        if(vol_input!=0) {
          let min_nav = fNav_input/(vol_input/100);
          document.getElementById('vol-warning-content').innerHTML = 'Chú ý: Các tài khoản có NAV dưới '+ min_nav.toLocaleString('en') +' sẽ không nhận được lệnh này vì không đủ lô 100 cổ phiếu.'
          document.getElementById('vol-warning').style.display='block';
        }
      } else document.getElementById('vol-warning').style.display='none';
    }
</script>
<script type="text/javascript">
    // Make connection
    //var socket = io('https://infless-copy-trade.herokuapp.com/', { transport : ['websocket'] }); //heroku
    var socket = io('https://infless-copy-trade-clone-001.herokuapp.com/', { transport : ['websocket'] });

    // GET custoken from DB
    let custoken = '<%- custoken %>';

    //document.getElementById('fnav').value = fundnav.value;
    // Emit events
    function orderSend(){
        console.log('Send button clicked');
        // Query DOM
        var   fundnav = document.getElementById('fund_nav_input'),
              btn = document.getElementById('send'),
              order = document.getElementById('order'),
              ordertype = document.getElementById('ordertype'),
              symbol = document.getElementById('symbol'),
              vol = document.getElementById('vol_input'),
              pct = document.getElementById('pct_input'),
              price = document.getElementById('price_input');
        //console.log('chat', {
        socket.emit('trade', {
            fundnav: fundnav.value.replace(/\,/g, ''),
            order: order.value,
            ordertype: ordertype.value.toUpperCase(),
            symbol: symbol.value.toUpperCase(),
            vol: vol.value.replace(/\,/g, ''),
            pct: pct.value,
            price: price.value
        });

        fetch("/pushtrans", {
          method: "POST",
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify({
            custoken:custoken,
            fundNav: fundnav.value.replace(/\,/g, ''),
            orderDirection: order.value,
            orderType: ordertype.value.toUpperCase(),
            pct: pct.value,
            price: price.value,
            ticker: symbol.value.toUpperCase(),
            vol: vol.value.replace(/\,/g, '')
          })
        }).then(res => res.json())
        .then(res => {
          console.log(res);
        })
        .catch(err => {
          console.log(err);
        });

        alert("Lệnh đã được gửi!");
    }
</script>
<!--script>
  var prices = <%- JSON.stringify(prices) %>;
  var portfolio = [];  //ticker,amount,equity,price
  var records = [];  //time,direction,ticker,vol,pct,price,avg_cost,profit
  var trades = <%- JSON.stringify(trades) %>;
  var initCap = 10;

  console.log(JSON.stringify(portfolio));
  for(var i=0; i<trades.length; i++){
    if(trades[i].order_direction=='buy'){
      if(portfolio.length==0){
        // Portfolio is empty
        portfolio.push({ticker:trades[i].ticker.toUpperCase(),amount:trades[i].vol,equity:trades[i].vol*trades[i].price,price:trades[i].price});
        records.push({
          id:trades[i].id,
          time:trades[i].order_time,
          direction:'MUA',
          ticker:trades[i].ticker.toUpperCase(),
          vol:trades[i].vol,
          pct:0,
          price:trades[i].price,
          avg_cost:trades[i].price,
          profit:0
        });
        portfolio[0].equity-=trades[i].vol*trades[i].price;
        portfolio[0].amount=portfolio[0].equity/portfolio[0].price;
      } else {
        // Portfolio has stocks in it
        let tickerFound=0;
        for(var j=0; j<portfolio.length; j++){
          if(trades[i].ticker.toUpperCase()==portfolio[j].ticker){
            tickerFound++;
            portfolio[j].amount+=trades[i].vol;
            portfolio[j].equity+=trades[i].vol*trades[i].price;
            portfolio[j].price=trades[i].price;
            records.push({
              id:trades[i].id,
              time:trades[i].order_time,
              direction:'MUA',
              ticker:trades[i].ticker.toUpperCase(),
              vol:trades[i].vol,
              pct:0,
              price:trades[i].price,
              avg_cost:portfolio[j].equity/portfolio[j].amount,
              profit:0
            });
            portfolio[0].equity-=trades[i].vol*trades[i].price;
            portfolio[0].amount=portfolio[0].equity/portfolio[0].price;
            break;
          }
        }
        if(tickerFound==0){
          // Add ticker to portfolio
          portfolio.push({ticker:trades[i].ticker.toUpperCase(),amount:trades[i].vol,equity:trades[i].vol*trades[i].price,price:trades[i].price});
          records.push({
            id:trades[i].id,
            time:trades[i].order_time,
            direction:'MUA',
            ticker:trades[i].ticker.toUpperCase(),
            vol:trades[i].vol,
            pct:0,
            price:trades[i].price,
            avg_cost:trades[i].price,
            profit:0
          });
          portfolio[0].equity-=trades[i].vol*trades[i].price;
          portfolio[0].amount=portfolio[0].equity/portfolio[0].price;
        }
      }
    } else {
      // Sell order
      if(portfolio.length>0){
        if(trades[i].pct==null){
          for(var j=0; j<portfolio.length; j++){
            if(trades[i].ticker.toUpperCase()==portfolio[j].ticker){
              if(portfolio[j].amount<trades[i].vol){
                let avg_cost = portfolio[j].equity/portfolio[j].amount;
                records.push({
                  id:trades[i].id,
                  time:trades[i].order_time,
                  direction:'BÁN',
                  ticker:trades[i].ticker.toUpperCase(),
                  vol:trades[i].vol,
                  pct:0,
                  price:trades[i].price,
                  avg_cost:avg_cost,
                  profit:((trades[i].price-avg_cost)/avg_cost)*100
                });
                portfolio[j].amount=0;
                portfolio[j].equity=0;
                portfolio[j].price=trades[i].price;
                portfolio[0].equity+=trades[i].vol*trades[i].price;
                portfolio[0].amount=portfolio[0].equity/portfolio[0].price;
              } else {
                let avg_cost = portfolio[j].equity/portfolio[j].amount;
                // SHIT )(#%^_@#)
                if(trades[i].ticker.toUpperCase() == 'GEG') {
                  avg_cost = 23.113;
                }
                records.push({
                  id:trades[i].id,
                  time:trades[i].order_time,
                  direction:'BÁN',
                  ticker:trades[i].ticker.toUpperCase(),
                  vol:trades[i].vol,
                  pct:0,
                  price:trades[i].price,
                  avg_cost:avg_cost,
                  profit:((trades[i].price-avg_cost)/avg_cost)*100
                });
                portfolio[j].amount-=trades[i].vol;
                portfolio[j].equity-=trades[i].vol*avg_cost;
                portfolio[j].price=trades[i].price;
                portfolio[0].equity+=trades[i].vol*trades[i].price;
                portfolio[0].amount=portfolio[0].equity/portfolio[0].price;
              }
            }
          }
        } else {
          for(var j=0; j<portfolio.length; j++){
            if(trades[i].ticker.toUpperCase()==portfolio[j].ticker){
              let sellAmount = trades[i].pct*portfolio[j].amount/100;
              if(portfolio[j].amount<sellAmount){
                let avg_cost = portfolio[j].equity/portfolio[j].amount;
                records.push({
                  id:trades[i].id,
                  time:trades[i].order_time,
                  direction:'BÁN',
                  ticker:trades[i].ticker.toUpperCase(),
                  vol:sellAmount,
                  pct:trades[i].pct,
                  price:trades[i].price,
                  avg_cost:avg_cost,
                  profit:((trades[i].price-avg_cost)/avg_cost)*100
                });
                portfolio[j].amount=0;
                portfolio[j].equity=0;
                portfolio[j].price=trades[i].price;
                portfolio[0].equity+=sellAmount*trades[i].price;
                portfolio[0].amount=portfolio[0].equity/portfolio[0].price;
              } else {
                let avg_cost = portfolio[j].equity/portfolio[j].amount;
                records.push({
                  id:trades[i].id,
                  time:trades[i].order_time,
                  direction:'BÁN',
                  ticker:trades[i].ticker.toUpperCase(),
                  vol:sellAmount,
                  pct:trades[i].pct,
                  price:trades[i].price,
                  avg_cost:avg_cost,
                  profit:((trades[i].price-avg_cost)/avg_cost)*100
                });
                portfolio[j].amount-=sellAmount;
                portfolio[j].equity-=sellAmount*avg_cost;
                portfolio[j].price=trades[i].price;
                portfolio[0].equity+=sellAmount*trades[i].price;
                portfolio[0].amount=portfolio[0].equity/portfolio[0].price;
              }
            }
          }
        }
      }
    }
    console.log(JSON.stringify(portfolio));
  }

  // UPDATE prices
  for(var i=0; i<portfolio.length; i++){
    if (i>0) portfolio[i].ticker = portfolio[i].ticker.replace(/\s/g,'');
    for(var j=0; j<prices.length; j++) {
      if(portfolio[i].ticker == prices[j][0]) {
        portfolio[i].price = parseFloat(prices[j][2]);
      }
    }
  }

  let ontheway=[{
    ticker: 'GEG',
    amount: 0.0006,  // million shares
    price: 0
  }];
  console.log('----------------------------------');
  console.log('Cash dividend');
  let cashDiv = [{date:new Date('2022','06','13'),ticker:'GEX',amount:500}];  // '06' month means July. Months start at 0

  if(portfolio.length>0) {
    let pfTableContent = '<table style="margin-top:30px;width:100%;text-align:center"><tr><th>Mã</th><th>Khối lượng</th><th>Khả dụng</th><th>Chờ nhận</th><th>Giá vốn TB</th><th>Giá hiện tại</th><th>Giá trị mua</th><th>Giá trị hiện tại</th><th>Lãi/lỗ</th><th>Lãi/lỗ (%)</th></tr>';
    for(var i=1; i<portfolio.length; i++) {
      let color = '';
      let receiving = 0;
      let buyPrice = 0;
      let buyValue = 0;
      let prfPct = 0;
      let currentValue = 0;
      for (var j=0; j<ontheway.length; j++) {
        if (portfolio[i].ticker == ontheway[j].ticker) {
          receiving += ontheway[j].amount;
        }
        if(receiving==0) {
          buyPrice = portfolio[i].equity / portfolio[i].amount;
          buyValue = portfolio[i].amount * buyPrice.toFixed(2) * 1000000000;
          currentValue = portfolio[i].amount * portfolio[i].price * 1000000000;
        } else {
          let rec_equity = ontheway[j].amount * ontheway[j].price;
          console.log(portfolio[i].ticker,portfolio[i].equity,rec_equity, portfolio[i].amount + ontheway[j].amount);
          buyPrice = (portfolio[i].equity  + rec_equity) / (portfolio[i].amount + ontheway[j].amount);
          buyValue = (portfolio[i].equity + rec_equity) * 1000000000;
          currentValue = (portfolio[i].amount + ontheway[j].amount)* portfolio[i].price * 1000000000;
        }
        if(portfolio[i].price > buyPrice) color='text-success';
        if(portfolio[i].price < buyPrice) color='text-danger';
        prfPct = (portfolio[i].price - buyPrice)/buyPrice * 100;

        console.log(portfolio[i].ticker,portfolio[i].price,buyPrice,color);
      }

      pfTableContent += '<tr><td>' + portfolio[i].ticker + '</td><td>'+ (portfolio[i].amount * 1000000).toLocaleString('en') +'</td><td>'+ (portfolio[i].amount * 1000000).toLocaleString('en') +'</td><td>'+ (receiving * 1000000).toLocaleString('en') +'</td><td>'+ buyPrice.toFixed(2) +'</td><td>' + portfolio[i].price + '</td><td>' + buyValue.toLocaleString('en') + '</td><td>' + currentValue.toLocaleString('en') + '</td><td class="'+color+'">' + (currentValue - buyValue).toLocaleString('en') + '</td><td class="'+color+'">'+prfPct.toFixed(2)+' %</td></tr>';
    }
    pfTableContent += '</table>';
    document.getElementById('currentPf').innerHTML=pfTableContent;
    document.getElementById('currentPfRow').style.display='block';
  }

  //console.log(portfolio);
  //console.log(records);

  let recordTableContent = '<table style="margin-top:30px;width:100%;text-align:center"><tr><th style="display:none">id</th><th>Thời gian</th><th>Lệnh</th><th>Mã</th><th>Khối lượng</th><th>Tỷ trọng bán</th><th>Giá</th><th>Giá vốn TB</th><th>Lãi/lỗ</th></tr>';
  for(var i=records.length-1; i>=0; i--){
    var pctDisplay='',
        profitDisplay='',
        profitStyle='';
    if(records[i].pct>0) pctDisplay=records[i].pct.toFixed(2)+'%';
    if(records[i].profit>0) {
      profitDisplay=records[i].profit.toFixed(2)+' %';
      profitStyle='text-success';
    }
    if(records[i].profit<0) {
      profitDisplay=records[i].profit.toFixed(2)+' %';
      profitStyle='text-danger';
    }
    var m = new Date(records[i].time);
    var dt = addZero(m.getDate()) +"/"+ addZero(m.getMonth()+1) +"/"+ m.getFullYear()  + " " + addZero(m.getHours()) + ":" + addZero(m.getMinutes()) + ":" + addZero(m.getSeconds());
    recordTableContent+='<tr><td  style="display:none">'+records[i].id+'</td><td>'+dt+'</td><td>'+records[i].direction+'</td><td>'+records[i].ticker+'</td><td>'+(records[i].vol*1000000).toLocaleString('en')+'</td><td>'+pctDisplay+'</td><td>'+records[i].price+'</td><td>'+records[i].avg_cost.toFixed(2)+'</td><td class="'+profitStyle+'">'+profitDisplay+'</td></tr>';
  }
  recordTableContent+='</table>';

  let  recordTable = document.getElementById('records');
  if(recordTable!=null){
    recordTable.innerHTML = recordTableContent;
  }

  console.log('----------------------------------');
  let totalCap=0;
  let portfolioChartData=[];
  if(portfolio.length<=1){
    portfolioChartData=[{y:100,label:'Tiền mặt'}];
    totalCap=initCap;
  } else {
    for(var i=0;i<portfolio.length;i++){
      totalCap+=portfolio[i].amount * portfolio[i].price;
    }
    let stock_pct=0;
    for(var i=1;i<portfolio.length;i++){
      if(portfolio[i].amount>0){
        portfolioChartData.push({y:(portfolio[i].equity/totalCap*100).toFixed(2),label:portfolio[i].ticker});
        stock_pct+=portfolio[i].equity/totalCap*100;
        console.log(portfolio[i].equity/totalCap*100,stock_pct);
      }
    }
    portfolioChartData.push({y:100-stock_pct,label:'Tiền mặt'});
  }


  document.getElementById('fund_nav_input').value = (totalCap*1000000000).toLocaleString('en');
  document.getElementById('fund_cash_input').value = (portfolio[0].equity*1000000000).toLocaleString('en');

</script-->

<!--script>
window.onload = function() {

var chart = new CanvasJS.Chart("chartContainer", {
	animationEnabled: true,

  backgroundColor: "rgba(0,0,0,0)",
	data: [{
		type: "pie",
		startAngle: 240,
		yValueFormatString: "##0.00\"%\"",
		indexLabel: "{label} {y}",
    indexLabelFontColor: "white",
		dataPoints: portfolioChartData/*[
			{y: 79.45, label: "Google"},
			{y: 7.31, label: "Bing"},
			{y: 7.06, label: "Baidu"},
			{y: 4.91, label: "Yahoo"},
			{y: 1.26, label: "Others"}
		]*/
	}]
});
chart.render();

console.log('----------------------------------');
console.log('VNINDEX');
console.log('----------------------------------');
let vnindex = <%- JSON.stringify(vnindex) %>;
console.log(vnindex);

console.log('----------------------------------');
console.log('Nav data:');
let navData = [];
console.log(navData);

let netValue=[];
let portfolioValue=[];
let cashValue=[];
let debtValue=[];

if(navData.length==0){
  netValue=[{ x: new Date(), y: 0 }];
  portfolioValue=[{ x: new Date(), y: 0 }];
  cashValue=[{ x: new Date(), y: 0 }];
  debtValue=[{ x: new Date(), y: 0 }];
} else {
  for(var i=0;i<navData.length;i++) {
    try {
      let d = new Date(navData[i].portfolio_date);
      netValue.push({label: d, y: navData[i].net_value});
      portfolioValue.push({label: d, y: navData[i].portfolio_value});
      cashValue.push({label: d, y: navData[i].cash_value});
      debtValue.push({label: d, y: navData[i].debt_value});
    }
    catch(err) {
      console.log(i, err);
    }
  }
}

// Performance comparison
let navCompare = [];
for(var i=0; i<vnindex.length;i++) {
  let parts = vnindex[i][0].split('/');
  let compareDate = new Date(parts[2],parts[1]-1,parts[0]);
  for (var j=0; j<netValue.length; j++) {
    //console.log(compareDate,netValue[j].label, compareDate.getDate()==netValue[j].label.getDate());

    if (netValue[j].label.getDate() == compareDate.getDate() && netValue[j].label.getMonth() == compareDate.getMonth() && netValue[j].label.getFullYear() == compareDate.getFullYear()) {
      navCompare.push({
        date: compareDate,
        vnindex: parseFloat(vnindex[i][1]),
        nav: netValue[j].y
      });
    }
  }
}

let navChange = [];
let vniChange = [];
for(var i=0; i<navCompare.length;i++) {
  navChange.push({
    label: navCompare[i].date,
    y: ((navCompare[i].nav - navCompare[0].nav)/navCompare[0].nav*100)
  });
  vniChange.push({
    label: navCompare[i].date,
    y: ((navCompare[i].vnindex - navCompare[0].vnindex)/navCompare[0].vnindex*100)
  });
}

console.log(navChange);
console.log(vniChange);
console.log(navCompare);
//console.log(netValue);
//console.log(portfolioValue);
//console.log(cashValue);
//console.log(debtValue);

var chart1 = new CanvasJS.Chart("chartContainer1",
    {
        animationEnabled: true,
        backgroundColor: "rgba(0,0,0,0)",
        axisX: {
          labelFormatter: function (e) {
    				return CanvasJS.formatDate( e.label, "DD/MM/YYYY");
    			},
          labelFontColor: "white"
        },
        axisY: {
            includeZero: false
        },
        axisY2: {
          title: "tỷ đồng",
          titleFontColor: "white",
          labelFontColor: "white"
        },
        legend: {
          fontColor: "white"
        },
        toolTip: {
    			contentFormatter: function (e) {
    				var content = " ";
    				for (var i = 0; i < e.entries.length; i++) {
    					content += "<span style='color:" + e.chart.selectedColorSet[i] + ";'>" + CanvasJS.formatDate(e.entries[i].dataPoint.label, "DD/MM/YYYY") + "</span>" + ": " + e.entries[i].dataPoint.y.toFixed(2);
    					content += "<br/>";
    				}
    				return content;
    			}
    		},
        data: [{
          type:"line",
          axisYType: "secondary",
          name: "Giá trị TS ròng",
          showInLegend: true,
          markerSize: 10,
          yValueFormatString: "0.00",
          dataPoints: netValue
        }]
    });
chart1.render();

var chart2 = new CanvasJS.Chart("chartContainer2",
    {
        animationEnabled: true,
        backgroundColor: "rgba(0,0,0,0)",
        axisX: {
          labelFormatter: function (e) {
    				return CanvasJS.formatDate( e.label, "DD/MM/YYYY");
    			},
          labelFontColor: "white"
        },
        axisY: {
            includeZero: false
        },
        axisY2: {
          title: "%",
          titleFontColor: "white",
          labelFontColor: "white"
        },
        legend: {
          fontColor: "white"
        },
        toolTip: {
    			contentFormatter: function (e) {
    				var content = " ";
    				for (var i = 0; i < e.entries.length; i++) {
    					content += "<span style='color:" + e.chart.selectedColorSet[i] + ";'>" + CanvasJS.formatDate(e.entries[i].dataPoint.label, "DD/MM/YYYY") + "</span>" + ": " + e.entries[i].dataPoint.y.toFixed(2) + '%';
    					content += "<br/>";
    				}
    				return content;
    			}
    		},
        data: [{
          type:"line",
          axisYType: "secondary",
          name: "NAV",
          showInLegend: true,
          markerSize: 10,
          yValueFormatString: "0.00",
          dataPoints: navChange
        },
        {
          type: "line",
          axisYType: "secondary",
          name: "VNINDEX",
          showInLegend: true,
          markerSize: 10,
          yValueFormatString: "0.00",
          dataPoints: vniChange
        }]
    });
chart2.render();

}
</script--->
<script>
  let vnindex = <%- JSON.stringify(vnindex) %>;
  let prices = <%- JSON.stringify(prices) %>;
  let dividend = <%- JSON.stringify(dividend) %>;
  let trades = <%- JSON.stringify(trades) %>;

  //console.log(vnindex);
  //console.log(prices);
  //console.log(dividend);
  //console.log(trades);

  let testDateStart = new Date('2022-06-01');
  let testDateEnd = new Date('2022-09-30');
  let dates = getDatesInRange(testDateStart,testDateEnd);
  let tradeTickers = [...new Set(trades.map(item => item.ticker))];

  //-----------DATA cleaning-------------
  //----------------excluding dates-------------
  dividend = dividend.filter(item => dates.includes(item[2]));

  //----------------excluding tickers-----------
  dividend = dividend.filter(item => tradeTickers.includes(item[1]));
  console.log(dividend);
  //console.log(arraySize(dividend));

  let tradeCleaned = []
  for(var i=0;i<trades.length;i++) {
    try {
      let d = new Date(trades[i].order_time);
      tradeCleaned.push({
        date: addZero(d.getDate())+"/"+addZero(d.getMonth()+1)+"/"+d.getFullYear(),
        order: trades[i].order_direction.toUpperCase(),
        ticker: trades[i].ticker,
        vol: trades[i].vol,
        price: trades[i].price
      });
    } catch (err) {
      console.log(i, err);
    }
  }
  console.log(tradeCleaned);

  // ----------Portfolio construction -----------
  let initCap = 10;
  let totalCap = 0;
  let portfolio = [];
  let netCashFlow = 0;
  let records = [];  //time,direction,ticker,vol,pct,price,avg_cost,profit
  let dividendRecords = [];

  for(var t=0;t<dates.length;t++) {
    // ------------ loop through dates ----------------
    for(var i=0;i<dividend.length;i++) {
      //-----------------Looking in dividend first -------------
      if(dates[t] == dividend[i][2]) {    // Ngay GDKHQ
        for(var j=0; j<portfolio.length; j++) {  // check if portfolio has this ticker
          if(dividend[i][1] == portfolio[j].ticker) {
            console.log(portfolio.length);
            console.log('Ngày '+ dates[t] + " có cổ tức trên " + (portfolio[j].volAvailable * Math.pow(10,6)) + " cổ phiếu " + portfolio[j].ticker);
            switch(dividend[i][0]) {
              case 'Trả cổ tức bằng cổ phiếu':
              case 'Thưởng cổ phiếu':
                // code block
                console.log('Trả cổ tức bằng cổ phiếu tỷ lệ '+ dividend[i][4]);
                try {
                  let splitRate = [parseFloat(dividend[i][4].split(":")[0]),parseFloat(dividend[i][4].split(":")[1])];
                  let pending = portfolio[j].volAvailable / splitRate[0] * splitRate[1];
                  console.log('Nhận thêm: ' + pending);
                  portfolio[j].pending += pending;
                  // update price
                  portfolio[j].buyprice = portfolio[j].eq / (portfolio[j].volAvailable + pending);
                  // dividend records
                  dividendRecords.push({
                    date:dates[t],
                    ticker:portfolio[j].ticker,
                    type:"cổ phiếu",
                    amount:pending
                  });
                } catch(err) {
                  console.log(err);
                }
                break;
              case 'Trả cổ tức bằng tiền mặt':
                // code block
                console.log('Trả cổ tức bằng tiền '+ dividend[i][4] + ' đồng/CP');
                try{
                  let cashPerShare = parseFloat(dividend[i][4]);
                  let cashDiv = (portfolio[j].volAvailable + portfolio[j].pending) * Math.pow(10,6) * cashPerShare / Math.pow(10,9);
                  netCashFlow += cashDiv;
                  console.log('Nhận thêm ' + cashDiv + " tỷ");
                  // update price
                  portfolio[j].buyprice -= cashPerShare / 1000;  // Not sure: what if cashPerShare > buyPrice?
                  // dividend records
                  dividendRecords.push({
                    date:dates[t],
                    ticker:portfolio[j].ticker,
                    type:"tiền mặt",
                    amount:cashDiv
                  });
                } catch(err) {
                  console.log(err);
                }
                break;
              case 'Phát hành thêm':
                // code block
                console.log('Phát hành thêm '+ dividend[i][4]);
                try{
                  let issueRate = [parseFloat(dividend[i][4].split(",")[0].split(':')[0]),parseFloat(dividend[i][4].split(",")[0].split(':')[1])];
                  let issuePrice = parseFloat(dividend[i][4].split(",")[1]) / Math.pow(10,3);
                  let pending = portfolio[j].volAvailable / issueRate[0] * issueRate[1];
                  console.log('Nhận thêm: ' + pending);
                  portfolio[j].pending += pending;
                  // update price
                  portfolio[j].buyprice = (portfolio[j].eq + pending * issuePrice) / (portfolio[j].volAvailable + pending);
                  // dividend records
                  dividendRecords.push({
                    date:dates[t],
                    ticker:portfolio[j].ticker,
                    type:"cổ phiếu",
                    amount:pending
                  });
                } catch(err) {
                  console.log(err);
                }
              default:
                // code block
            }
          }
        }
      }
    }
    for(var i=0;i<tradeCleaned.length;i++) {
      //-----------------Looking in trades second -------------
      if(dates[t] == tradeCleaned[i].date) {
        if(tradeCleaned[i].order=="BUY") {
          if(portfolio.length==0) {
            // blank portfolio
            portfolio.push({
              ticker: tradeCleaned[i].ticker.toUpperCase(),
              volAvailable: tradeCleaned[i].vol,
              buyprice: tradeCleaned[i].price,
              eq: tradeCleaned[i].vol * tradeCleaned[i].price,
              pending: 0
            });
            // push to records
            records.push({
              id:0,
              time:tradeCleaned[i].date,
              direction:'MUA',
              ticker:tradeCleaned[i].ticker.toUpperCase(),
              vol:tradeCleaned[i].vol,
              price:tradeCleaned[i].price,
              avg_cost:tradeCleaned[i].price,
              profit:0
            });
            netCashFlow -= tradeCleaned[i].vol * tradeCleaned[i].price;
          } else {
            // portfolio not blank
            let cnt = 0;
            for(var j=0;j<portfolio.length;j++) {
              if(tradeCleaned[i].ticker.toUpperCase() == portfolio[j].ticker.toUpperCase()) {
                // ticker already in portfolio
                cnt ++;
                portfolio[j].volAvailable += tradeCleaned[i].vol;
                portfolio[j].eq += tradeCleaned[i].vol * tradeCleaned[i].price;
                portfolio[j].buyprice = portfolio[j].eq/(portfolio[j].volAvailable + portfolio[j].pending);
                // push to records
                records.push({
                  id:0,
                  time:tradeCleaned[i].date,
                  direction:'MUA',
                  ticker:tradeCleaned[i].ticker.toUpperCase(),
                  vol:tradeCleaned[i].vol,
                  price:tradeCleaned[i].price,
                  avg_cost:portfolio[j].eq/portfolio[j].volAvailable,
                  profit:0
                });
              }
            }
            if(cnt == 0) {
              // this ticker not in portfolio
              portfolio.push({
                ticker: tradeCleaned[i].ticker.toUpperCase(),
                volAvailable: tradeCleaned[i].vol,
                buyprice: tradeCleaned[i].price,
                eq: tradeCleaned[i].vol * tradeCleaned[i].price,
                pending: 0
              });
              records.push({
                id:0,
                time:tradeCleaned[i].date,
                direction:'MUA',
                ticker:tradeCleaned[i].ticker.toUpperCase(),
                vol:tradeCleaned[i].vol,
                price:tradeCleaned[i].price,
                avg_cost:tradeCleaned[i].price,
                profit:0
              });
            }
            netCashFlow -= tradeCleaned[i].vol * tradeCleaned[i].price;
          }
        } else {
          // SELL order
          if(portfolio.length>0) {
            for(var j=0;j<portfolio.length;j++) {
              if(tradeCleaned[i].ticker.toUpperCase() == portfolio[j].ticker.toUpperCase()) {
                // ticker already in portfolio

                portfolio[j].volAvailable -= tradeCleaned[i].vol;
                portfolio[j].eq -= tradeCleaned[i].vol * portfolio[j].buyprice;  // tru di theo gia von
                if(portfolio[j].eq < 0) portfolio[j].eq = 0;
                if(portfolio[j].volAvailable < 0) portfolio[j].volAvailable = 0;
                netCashFlow += tradeCleaned[i].vol * tradeCleaned[i].price;

                // push to records
                records.push({
                  id:0,
                  time:tradeCleaned[i].date,
                  direction:'BÁN',
                  ticker:tradeCleaned[i].ticker.toUpperCase(),
                  vol:tradeCleaned[i].vol,
                  price:tradeCleaned[i].price,
                  avg_cost:portfolio[j].buyprice,
                  profit:((tradeCleaned[i].price-portfolio[j].buyprice)/portfolio[j].buyprice)*100
                });
              }
            }
          }
        }
      }
    }

    // --------------------record to snapShot------------
    /*console.log(dates[t]);
    for(var k=0;k<portfolio.length;k++) {
      console.log(portfolio[k]);
    }
    //console.log(JSON.stringify(portfolio));
    console.log("net cashflow: ",netCashFlow);*/
  }
  // remove all tickers those have total amount = 0
  for(var i=0; i<portfolio.length; i++) {
    if(portfolio[i].volAvailable + portfolio[i].pending <= 0) {
      portfolio.splice(i, 1);
    }
  }

  // -------------Update current price --------------
  for(var i=0; i<prices.length; i++){
    for(var j=0;j<portfolio.length;j++){
      if(prices[i][0] == portfolio[j].ticker) {
        try {
          portfolio[j].price = parseFloat(prices[i][2]);
          portfolio[j].cap = (portfolio[j].volAvailable + portfolio[j].pending) * portfolio[j].price;
        } catch(err) {
          console.log(err);
        }
      }
    }
  }


  //--------------NAV calculation----------
  for(var i=0;i<portfolio.length;i++) {
    if(!portfolio[i].hasOwnProperty('price')) {
      portfolio[i].price = portfolio[i].buyprice;
      portfolio[i].cap = portfolio[i].eq;
    }
    totalCap += portfolio[i].cap;
  }
  console.log(portfolio);
  let cash = initCap + netCashFlow;
  totalCap += cash;
  console.log(totalCap);
  // then update NAV values to DB

  // update NAV and cash inputs
  document.getElementById('fund_nav_input').value = (totalCap * Math.pow(10,9)).toLocaleString('en');
  document.getElementById('fund_cash_input').value = (cash * Math.pow(10,9)).toLocaleString('en');

  //-----------Portfolio table rendering------------
  let pfTableContent = '<table style="margin-top:30px;width:100%;text-align:center"><tr><th>Mã</th><th>Khối lượng</th><th>Khả dụng</th><th>Chờ nhận</th><th>Giá vốn TB</th><th>Giá hiện tại</th><th>Giá trị mua</th><th>Giá trị hiện tại</th><th>Lãi/lỗ</th><th>Lãi/lỗ (%)</th></tr>';
  for(var i=0; i<portfolio.length; i++) {
    let color = '';
    if(portfolio[i].price > portfolio[i].buyprice) color='text-success';
    if(portfolio[i].price < portfolio[i].buyprice) color='text-danger';
    let prfPct = (portfolio[i].price - portfolio[i].buyprice)/portfolio[i].buyprice * 100;
    pfTableContent += '<tr><td>' + portfolio[i].ticker +
    '</td><td>'+ (portfolio[i].volAvailable * Math.pow(10,6)).toLocaleString('en') +
    '</td><td>'+ (portfolio[i].volAvailable * Math.pow(10,6)).toLocaleString('en') +
    '</td><td>'+ (portfolio[i].pending * Math.pow(10,6)).toLocaleString('en') +
    '</td><td>'+ (portfolio[i].buyprice* Math.pow(10,3)).toLocaleString('en',{
        minimumFractionDigits: 0,
        maximumFractionDigits: 0,
    }) +
    '</td><td>' + (portfolio[i].price* Math.pow(10,3)).toLocaleString('en',{
        minimumFractionDigits: 0,
        maximumFractionDigits: 0,
    }) +
    '</td><td>' + (portfolio[i].eq * Math.pow(10,9)).toLocaleString('en',{
        minimumFractionDigits: 0,
        maximumFractionDigits: 0,
    }) +
    '</td><td>' + (portfolio[i].cap * Math.pow(10,9)).toLocaleString('en',{
        minimumFractionDigits: 0,
        maximumFractionDigits: 0,
    }) +
    '</td><td class="'+color+'">' + ((portfolio[i].cap - portfolio[i].eq) * Math.pow(10,9)).toLocaleString('en',{
        minimumFractionDigits: 0,
        maximumFractionDigits: 0,
    }) +
    '</td><td class="'+color+'">'+prfPct.toFixed(2)+' %</td></tr>';
  }
  pfTableContent += '</table>';
  document.getElementById('currentPf').innerHTML=pfTableContent;
  document.getElementById('currentPfRow').style.display='block';

  //-----------Trades record table rendering--------------------
  let recordTableContent = '<table style="margin-top:30px;width:100%;text-align:center"><tr><th style="display:none">id</th><th>Ngày</th><th>Lệnh</th><th>Mã</th><th>Khối lượng</th><th>Giá</th><th>Giá vốn TB</th><th>Lãi/lỗ</th></tr>';
  for(var i=records.length-1; i>=0; i--){
    var profitDisplay='',
        profitStyle='';
    if(records[i].profit>0) {
      profitDisplay=records[i].profit.toFixed(2)+' %';
      profitStyle='text-success';
    }
    if(records[i].profit<0) {
      profitDisplay=records[i].profit.toFixed(2)+' %';
      profitStyle='text-danger';
    }
    var dt = records[i].time;
    recordTableContent+='<tr><td  style="display:none">'+records[i].id+'</td><td>'+dt+'</td><td>'+records[i].direction+'</td><td>'+records[i].ticker+'</td><td>'+(records[i].vol*1000000).toLocaleString('en')+'</td><td>'+records[i].price+'</td><td>'+records[i].avg_cost.toFixed(2)+'</td><td class="'+profitStyle+'">'+profitDisplay+'</td></tr>';
  }
  recordTableContent+='</table>';

  let  recordTable = document.getElementById('records');
  if(recordTable!=null){
    recordTable.innerHTML = recordTableContent;
  }

  //-----------Dividend table rendering----------------
  let dividendTableContent = '';
  if(dividendRecords.length==0) {
    dividendTableContent = 'Không có cổ tức/quyền';
  } else {
    dividendTableContent = '<table style="margin-top:30px;width:100%;text-align:center"><tr><th>Ngày</th><th>Mã</th><th>Loại cổ tức/quyền</th><th>Số lượng</th><th>Đơn vị</th><tr>';
    for(var i=0;i<dividendRecords.length;i++) {
      let amount = dividendRecords[i].amount;
      if(dividendRecords[i].type == 'tiền mặt') amount *= Math.pow(10,9);
      else amount *= Math.pow(10,6);
      dividendTableContent+='<tr><td>' + dividendRecords[i].date + '</td><td>' + dividendRecords[i].ticker + '</td><td>' + dividendRecords[i].type + '</td><td>' + amount.toLocaleString('en') + '</td><td>';
      if(dividendRecords[i].type == 'tiền mặt') dividendTableContent+= 'đồng</td></tr>';
      else dividendTableContent+= 'cổ phiếu</td></tr>';
    }
    dividendTableContent+= '</table>';
  }
  let  dividendTable = document.getElementById('dividend');
  if(dividendTable!=null){
    dividendTable.innerHTML = dividendTableContent;
  }

  //-----------Chart rendering-----------
  //-----------------Pie chart----------------
  let portfolioChartData=[];
  let stock_pct=0;
  for(var i=0;i<portfolio.length;i++){
    if((portfolio[i].volAvailable + portfolio[i].pending)>0){
      portfolioChartData.push({y:(portfolio[i].cap/totalCap*100).toFixed(2),label:portfolio[i].ticker});
      stock_pct+=portfolio[i].cap/totalCap*100;
      //console.log(portfolio[i].cap/totalCap*100,stock_pct);
    }
  }
  portfolioChartData.push({y:100-stock_pct,label:'Tiền mặt'});

  var chartPie0 = new CanvasJS.Chart("chartContainer", {
    animationEnabled: true,

    backgroundColor: "rgba(0,0,0,0)",
    data: [{
      type: "pie",
      startAngle: 240,
      yValueFormatString: "##0.00\"%\"",
      indexLabel: "{label} {y}",
      indexLabelFontColor: "white",
      dataPoints: portfolioChartData/*[
        {y: 79.45, label: "Google"},
        {y: 7.31, label: "Bing"},
        {y: 7.06, label: "Baidu"},
        {y: 4.91, label: "Yahoo"},
        {y: 1.26, label: "Others"}
      ]*/
    }]
  });
  chartPie0.render();

  //-----------------Line chart 1----------------
  let navData = <%- JSON.stringify(pfRecords) %>;
  console.log(navData);

  let netValue=[];

  if(navData.length==0){
    netValue=[{ x: new Date(), y: 0 }];
  } else {
    for(var i=0;i<navData.length;i++) {
      try {
        let d = new Date(navData[i].portfolio_date);
        netValue.push({label: d, y: navData[i].net_value});
      }
      catch(err) {
        console.log(i, err);
      }
    }
  }
  var chart1 = new CanvasJS.Chart("chartContainer1",
      {
          animationEnabled: true,
          backgroundColor: "rgba(0,0,0,0)",
          axisX: {
            labelFormatter: function (e) {
              return CanvasJS.formatDate( e.label, "DD/MM/YYYY");
            },
            labelFontColor: "white"
          },
          axisY: {
              includeZero: false
          },
          axisY2: {
            title: "tỷ đồng",
            titleFontColor: "white",
            labelFontColor: "white"
          },
          legend: {
            fontColor: "white"
          },
          toolTip: {
            contentFormatter: function (e) {
              var content = " ";
              for (var i = 0; i < e.entries.length; i++) {
                content += "<span style='color:" + e.chart.selectedColorSet[i] + ";'>" + CanvasJS.formatDate(e.entries[i].dataPoint.label, "DD/MM/YYYY") + "</span>" + ": " + e.entries[i].dataPoint.y.toFixed(2);
                content += "<br/>";
              }
              return content;
            }
          },
          data: [{
            type:"line",
            axisYType: "secondary",
            name: "Giá trị TS ròng",
            showInLegend: true,
            markerSize: 10,
            yValueFormatString: "0.00",
            dataPoints: netValue
          }]
      });
  chart1.render();

  //-----------------Line chart 2----------------
  let navCompare = [];
  for(var i=0; i<vnindex.length;i++) {
    let parts = vnindex[i][0].split('/');
    let compareDate = new Date(parts[2],parts[1]-1,parts[0]);
    for (var j=0; j<netValue.length; j++) {
      //console.log(compareDate,netValue[j].label, compareDate.getDate()==netValue[j].label.getDate());

      if (netValue[j].label.getDate() == compareDate.getDate() && netValue[j].label.getMonth() == compareDate.getMonth() && netValue[j].label.getFullYear() == compareDate.getFullYear()) {
        navCompare.push({
          date: compareDate,
          vnindex: parseFloat(vnindex[i][1]),
          nav: netValue[j].y
        });
      }
    }
  }

  let navChange = [];
  let vniChange = [];
  for(var i=0; i<navCompare.length;i++) {
    navChange.push({
      label: navCompare[i].date,
      y: ((navCompare[i].nav - navCompare[0].nav)/navCompare[0].nav*100)
    });
    vniChange.push({
      label: navCompare[i].date,
      y: ((navCompare[i].vnindex - navCompare[0].vnindex)/navCompare[0].vnindex*100)
    });
  }

  console.log(navChange);
  console.log(vniChange);
  console.log(navCompare);

  var chart2 = new CanvasJS.Chart("chartContainer2",
      {
          animationEnabled: true,
          backgroundColor: "rgba(0,0,0,0)",
          axisX: {
            labelFormatter: function (e) {
              return CanvasJS.formatDate( e.label, "DD/MM/YYYY");
            },
            labelFontColor: "white"
          },
          axisY: {
              includeZero: false
          },
          axisY2: {
            title: "%",
            titleFontColor: "white",
            labelFontColor: "white"
          },
          legend: {
            fontColor: "white"
          },
          toolTip: {
            contentFormatter: function (e) {
              var content = " ";
              for (var i = 0; i < e.entries.length; i++) {
                content += "<span style='color:" + e.chart.selectedColorSet[i] + ";'>" + CanvasJS.formatDate(e.entries[i].dataPoint.label, "DD/MM/YYYY") + "</span>" + ": " + e.entries[i].dataPoint.y.toFixed(2) + '%';
                content += "<br/>";
              }
              return content;
            }
          },
          data: [{
            type:"line",
            axisYType: "secondary",
            name: "NAV",
            showInLegend: true,
            markerSize: 10,
            yValueFormatString: "0.00",
            dataPoints: navChange
          },
          {
            type: "line",
            axisYType: "secondary",
            name: "VNINDEX",
            showInLegend: true,
            markerSize: 10,
            yValueFormatString: "0.00",
            dataPoints: vniChange
          }]
      });
  chart2.render();

  // ----------Support functions---------
  function addZero(numb) {
    if(numb<10){
      return "0"+numb;
    } else {
      return ""+numb;
    }
  }

  function getDatesInRange(startDate, endDate) {
    const date = new Date(startDate.getTime());
    const dates = [];
    while (date <= endDate) {
      let d = new Date(date);
      //if(d.getDay()%6!=0) {  // weekend not included
        dates.push(addZero(d.getDate())+"/"+addZero(d.getMonth()+1)+"/"+d.getFullYear());
      //}
      date.setDate(date.getDate() + 1);
    }
    return dates;
  }

  function arraySize(arr){
    return {r: arr.length, c:arr[0].length === undefined?1:arr[0].length };  // {r: 1, c: 5}
  }

</script>

</html>
